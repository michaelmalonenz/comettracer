import 'vector3D' as vector
import 'intersection' as intersection
import 'lambertian' as lambertian
import 'glass' as glass
import 'ray' as ray


class Sphere {
    init(objHash) {
        self.center = vector.Vector3D(
            objHash['center']['x'],
            objHash['center']['y'],
            objHash['center']['z'])
        self.radius = objHash['radius']
        self.colour = vector.Vector3D(
            objHash['colour']['r'],
            objHash['colour']['g'],
            objHash['colour']['b'])
        self.shininess = objHash['shininess']
        if (objHash.has_key?('material')) {
            var material = objHash['material']
            if (material == 'glass') {
                self.material = glass.Glass()
            }
            else if (material == 'lambertian') {
                self.material = lambertian.Lambertian()
            }
            else {
                throw Exception('Material not found!')
            }
        }
        else {
            self.material = lambertian.Lambertian()
        }
    }

    intersect(ray) {
        var local_ray_pos = ray.position - self.center

        var a = ray.direction.dot(ray.direction)
        var b = 2.0 * ray.direction.dot(local_ray_pos)
        var c = local_ray_pos.dot(local_ray_pos) - (self.radius * self.radius)

        var discriminant = b * b - 4.0 * a * c

        # If the discriminant is negative, there are no real roots;
        # the ray never touches nor intersects the sphere.
        if (discriminant < vector.EPSILON)
            return nil

        # compute q
        var disc_sqrt = discriminant.square_root()
        var q = b < vector.EPSILON ? (-b - disc_sqrt) / 2.0 : (-b + disc_sqrt) / 2.0

        # compute t0 and t1
        var t0 = q / a
        var t1 = c / q

        # prefer a t that is not negative, because that would be odd,
        # a ray that goes in the opposite direction.
        var t = t0 < vector.EPSILON ? t1 : t0

        # if both t's are negative, the object is on the other side
        # of the ray apparently. No hits.
        if (t < vector.EPSILON)
            return nil

        # Calculate normal.
        var position = ray.at(t)
        var normal = (position - self.center).normalise()

        return intersection.Intersection(t, position, normal, self)
    }

    scatter(incident, collision) {
        var scattered = self.material.scatter(incident, collision)
        var internal_ray = ray.Ray(scattered.ray.position, scattered.ray.position + (scattered.ray.direction * vector.EPSILON))
        var intersection = self.intersect(internal_ray)
        if (!intersection.nil?()) {
            var position = intersection.position + (scattered.ray.direction * vector.EPSILON)
            scattered.ray.position = position
        }
        return scattered
    }
}