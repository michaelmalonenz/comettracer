var EPSILON = 0.00000001

function clamp(num) {
    return Number.max(Number.min(1, num), 0)
}


class Vector3D {
    init(x=0.0, y=0.0, z=0.0) {
        self.x = x
        self.y = y
        self.z = z
    }

    r() {
        return clamp(self.x).square_root() * 255
    }

    g() {
        return clamp(self.y).square_root() * 255
    }

    b() {
        return clamp(self.z).square_root() * 255
    }

    cross(rhs) {
        return Vector3D(
            (self.y * rhs.z) - (self.z * rhs.y),
            (self.z * rhs.x) - (self.x * rhs.z),
            (self.x * rhs.y) - (self.y * rhs.x))
    }

    dot(rhs) {
        return (self.x * rhs.x) + (self.y * rhs.y) + (self.z * rhs.z)
    }

    normalise() {
        var length = self.length()
        if (length == 0)
            length = 1
        return Vector3D(
            self.x / length,
		    self.y / length,
		    self.z / length)
    }

    length_squared() {
        return (self.x*self.x + self.y*self.y + self.z*self.z)
    }

    length() {
        return self.length_squared().square_root()
    }

    near_zero?() {
        return (self.x.absolute_value() < EPSILON && self.y.absolute_value() < EPSILON && self.z.absolute_value() < EPSILON)
    }

    to_string() {
        return "[" + self.x.to_string() + ", " + self.y.to_string() + ", " + self.z.to_string() + "]"
    }

    operator - (other) {
        return Vector3D(
            self.x - other.x,
		    self.y - other.y,
		    self.z - other.z)
    }

    operator + (other) {
        return Vector3D(
            self.x + other.x,
		    self.y + other.y,
		    self.z + other.z)
    }

    operator * (scalar) {
        return Vector3D(
            self.x * scalar,
            self.y * scalar,
            self.z * scalar)
    }

    operator / (scalar) {
        return Vector3D(
            self.x / scalar,
            self.y / scalar,
            self.z / scalar
        )
    }

    static _random_unit_part() {
        return (Number.random() * 2) - 1
    }

    static random() {
        return Vector3D(
            Vector3D._random_unit_part(),
            Vector3D._random_unit_part(),
            Vector3D._random_unit_part())
    }

    static random_unit_vector() {
        while (true) {
            var p = Vector3D.random()
            if (p.length_squared() < 1) {
                return p.normalise()
            }
        }
    }
}