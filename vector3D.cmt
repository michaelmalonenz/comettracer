class Vector3D {
    init(x=0.0, y=0.0, z=0.0) {
        self.x = x
        self.y = y
        self.z = z
    }

    r() {
        return Number.min(self.x * 255, 255)
    }

    g() {
        return Number.min(self.y * 255, 255)
    }

    b() {
        return Number.min(self.z * 255, 255)
    }

    cross(rhs) {
        return Vector3D(
            (self.y * rhs.z) - (self.z * rhs.y),
            (self.z * rhs.x) - (self.x * rhs.z),
            (self.x * rhs.y) - (self.y * rhs.x))
    }

    dot(rhs) {
        return (self.x * rhs.x) + (self.y * rhs.y) + (self.z * rhs.z)
    }

    normalise() {
        var length = self.length()
        if (length == 0)
            length = 1
        return Vector3D(
            self.x / length,
		    self.y / length,
		    self.z / length)
    }

    length() {
        return (self.x*self.x + self.y*self.y + self.z*self.z).square_root()
    }

    to_string() {
        return "[" + self.x.to_string() + ", " + self.y.to_string() + ", " + self.z.to_string() + "]"
    }

    operator - (other) {
        return Vector3D(
            self.x - other.x,
		    self.y - other.y,
		    self.z - other.z)
    }

    operator + (other) {
        return Vector3D(
            self.x + other.x,
		    self.y + other.y,
		    self.z + other.z)
    }

    operator * (scalar) {
        return Vector3D(
            self.x * scalar,
            self.y * scalar,
            self.z * scalar)
    }
}